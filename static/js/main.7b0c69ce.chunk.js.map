{"version":3,"sources":["pages/NotFound.tsx","app/hooks.ts","features/animalsSlice.ts","components/form.tsx","pages/Main.tsx","pages/Translations.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["NotFound","src","className","to","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","animalList","localStorage","getItem","JSON","parse","getAnimalList","animalsSlice","createSlice","name","reducers","addAnimal","state","payload","push","updateAnimals","deleteAnimal","filter","item","id","actions","Form","clickHandler","useState","createNewSpecies","setCreateNewSpecies","inputAnimalName","setInputAnimalName","inputAnimalImage","setInputAnimalImage","inputCreateSpecie","setInputCreateSpecie","errorsCheck","setErrorsCheck","selectSpecie","setSelectSpecie","dispatch","species","animal","map","specie","filtredSpecies","index","indexOf","regexURL","onSubmit","e","preventDefault","length","test","imgSrc","Math","random","type","placeholder","value","onChange","target","style","borderColor","onClick","display","Main","toggleForm","setToggleForm","selectLanguage","setSelectLanguage","animals","animalsFilter","setAnimalsFilter","languagesAbb","Object","keys","useEffect","setItem","stringify","alt","toUpperCase","filtredAnimals","animalSpeciesMenuFilter","langCodes","af","sq","an","ar","hy","as","ast","az","eu","bg","be","bn","bs","br","my","ca","ch","ce","zh","cv","co","cr","hr","cs","da","nl","en","eo","et","fo","fa","fj","fi","fr","fy","fur","gd","gl","ka","de","el","gu","ht","he","hi","hu","is","iu","ga","it","ja","kn","ks","kk","km","ky","tlh","ko","la","lv","lt","lb","mk","ms","ml","mt","mi","mr","mo","nv","ng","ne","no","oc","or","om","pl","pt","pa","qu","rm","ro","ru","sz","sg","sa","sc","sd","si","sr","sk","sl","so","sb","es","sx","sw","sv","ta","tt","te","th","tig","ts","tn","tr","tk","uk","hsb","ur","ve","vi","vo","wa","cy","xh","ji","zu","Translations","inputTranslate","setInputTranslate","langCodesTytles","values","animalNames","getKeyByValue","find","key","newAnimalArr","assign","rowSpan","input","newArr","updateFieldChanged","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","animalsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b0c69ce.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <>\r\n      <img src=\"./404.gif\" />\r\n      <div className=\"row\">\r\n        <Link className=\"button\" to=\"/\">\r\n          Back to Main page\r\n        </Link>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\ntype AnimalType = {\r\n  name: {\r\n    [key: string]: string\r\n  };\r\n  imgSrc: string;\r\n  specie: string;\r\n  id: number;\r\n}\r\n\r\nconst getAnimalList = () => {\r\n  const animalList = localStorage.getItem('animals');\r\n  if (animalList) {\r\n    return JSON.parse(animalList)\r\n  }\r\n  return []\r\n}\r\n\r\nconst initialState: AnimalType[] = getAnimalList()\r\n\r\n\r\n\r\nexport const animalsSlice = createSlice({\r\n  name: 'animals',\r\n  initialState,\r\n  reducers: {\r\n    addAnimal: (state, { payload }: PayloadAction<AnimalType>) => {\r\n      state.push(payload);\r\n    },\r\n    updateAnimals: (state, { payload }: PayloadAction<AnimalType[]>) => {\r\n      return (\r\n        state = payload\r\n      )\r\n    },\r\n    deleteAnimal: (state, { payload }) => state.filter((item) => item.id !== payload),\r\n  }\r\n});\r\n\r\nexport const { addAnimal, updateAnimals, deleteAnimal } = animalsSlice.actions\r\n\r\nexport default animalsSlice.reducer","import { useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\r\nimport { addAnimal } from '../features/animalsSlice';\r\n\r\ninterface Props {\r\n  clickHandler: (arg0: boolean) => void;\r\n}\r\n\r\nconst Form: React.FC<Props> = ({ clickHandler }) => {\r\n  const [createNewSpecies, setCreateNewSpecies] = useState(false);\r\n  const [inputAnimalName, setInputAnimalName] = useState('');\r\n  const [inputAnimalImage, setInputAnimalImage] = useState('');\r\n  const [inputCreateSpecie, setInputCreateSpecie] = useState('');\r\n  const [errorsCheck, setErrorsCheck] = useState(true);\r\n  const [selectSpecie, setSelectSpecie] = useState('');\r\n  const dispatch = useAppDispatch();\r\n  const animals = useAppSelector((state) => state.animal);\r\n  const species = animals.map((animal) => {\r\n    return animal.specie;\r\n  });\r\n\r\n  const filtredSpecies = species.filter(function (item, index) {\r\n    return species.indexOf(item) == index;\r\n  });\r\n\r\n  const regexURL =\r\n    /(?:https?):\\/\\/(\\w+:?\\w*)?(\\S+)(:\\d+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\r\n\r\n  const createNewSpecie = () => {\r\n    setCreateNewSpecies(!createNewSpecies);\r\n  };\r\n\r\n  const submit = (e: React.ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setErrorsCheck(false);\r\n    if (\r\n      inputAnimalName.length > 2 &&\r\n      regexURL.test(inputAnimalImage) &&\r\n      (inputCreateSpecie.length > 3 || selectSpecie !== '') &&\r\n      selectSpecie !== '- Choose specie -'\r\n    ) {\r\n      clickHandler(false);\r\n      dispatch(\r\n        addAnimal({\r\n          name: { ['en']: inputAnimalName },\r\n          imgSrc: inputAnimalImage,\r\n          specie: createNewSpecies ? inputCreateSpecie : selectSpecie,\r\n          id: Math.random(),\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={submit} className=\"form\">\r\n        <h2>Add animal</h2>\r\n        <label>\r\n          Name\r\n          <input\r\n            className=\"form__label\"\r\n            type=\"text\"\r\n            placeholder=\"Animal name\"\r\n            value={inputAnimalName}\r\n            onChange={(e) => {\r\n              setInputAnimalName(e.target.value);\r\n            }}\r\n            style={{\r\n              borderColor:\r\n                inputAnimalName.length < 3 && !errorsCheck ? 'red' : 'black',\r\n            }}\r\n          />\r\n          {inputAnimalName.length < 3 && !errorsCheck && (\r\n            <span className=\"form__error\">Minimum 3 charechters required</span>\r\n          )}\r\n        </label>\r\n        <label>\r\n          Image source\r\n          <input\r\n            className=\"form__label\"\r\n            type=\"text\"\r\n            placeholder=\"Image source\"\r\n            value={inputAnimalImage}\r\n            onChange={(e) => {\r\n              setInputAnimalImage(e.target.value);\r\n            }}\r\n            style={{\r\n              borderColor:\r\n                !regexURL.test(inputAnimalImage) && !errorsCheck\r\n                  ? 'red'\r\n                  : 'black',\r\n            }}\r\n          />\r\n          {!regexURL.test(inputAnimalImage) && !errorsCheck && (\r\n            <span className=\"form__error\">Choose valid URL link</span>\r\n          )}\r\n        </label>\r\n        <label>\r\n          Species\r\n          <span className=\"form__button-new-species\" onClick={createNewSpecie}>\r\n            {!createNewSpecies\r\n              ? ' (Add new specie)'\r\n              : ' (Choose from the list)'}\r\n          </span>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form__label\"\r\n            style={{\r\n              display: !createNewSpecies ? 'none' : 'block',\r\n              borderColor:\r\n                inputCreateSpecie.length < 4 && !errorsCheck ? 'red' : 'black',\r\n            }}\r\n            value={inputCreateSpecie}\r\n            onChange={(e) => {\r\n              setInputCreateSpecie(e.target.value);\r\n            }}\r\n          />\r\n          {inputCreateSpecie.length < 4 && createNewSpecies && !errorsCheck && (\r\n            <span className=\"form__error\">Minimum 4 charechters required</span>\r\n          )}\r\n          <select\r\n            value={selectSpecie}\r\n            onChange={(e) => {\r\n              setSelectSpecie(e.target.value);\r\n            }}\r\n            className=\"form__label\"\r\n            style={{\r\n              display: createNewSpecies ? 'none' : 'block',\r\n              borderColor:\r\n                (selectSpecie === '' || selectSpecie === '- Choose specie -') &&\r\n                !createNewSpecies &&\r\n                !errorsCheck\r\n                  ? 'red'\r\n                  : 'black',\r\n            }}\r\n          >\r\n            <option value=\"- Choose specie -\">- Choose specie -</option>\r\n            {filtredSpecies.map((animal) => {\r\n              return (\r\n                <option key={Math.random()} value={animal}>\r\n                  {animal}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n          {(selectSpecie === '' || selectSpecie === '- Choose specie -') &&\r\n            !createNewSpecies &&\r\n            !errorsCheck && (\r\n              <span className=\"form__error\">Choose or create specie</span>\r\n            )}\r\n        </label>\r\n        <div className=\"form__buttons\">\r\n          <button className=\"button\">Add</button>\r\n          <button onClick={() => clickHandler(false)} className=\"button\">\r\n            Escape\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { useEffect, useState } from 'react';\r\nimport Form from '../components/form';\r\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\r\nimport { deleteAnimal, updateAnimals } from '../features/animalsSlice';\r\nimport { Link } from 'react-router-dom';\r\n\r\ntype AnimalType = {\r\n  name: {\r\n    [key: string]: string;\r\n  };\r\n  imgSrc: string;\r\n  specie: string;\r\n  id: number;\r\n};\r\n\r\nconst Main = () => {\r\n  const [toggleForm, setToggleForm] = useState(false);\r\n  const [selectLanguage, setSelectLanguage] = useState('en');\r\n  const dispatch = useAppDispatch();\r\n  const animals = useAppSelector((state) => state.animal);\r\n  const species = animals.map((animal) => {\r\n    return animal.specie;\r\n  });\r\n\r\n  const filtredSpecies = species.filter(function (item, index) {\r\n    return species.indexOf(item) == index;\r\n  });\r\n\r\n  const [animalsFilter, setAnimalsFilter] = useState(animals);\r\n\r\n  let languagesAbb: string[] = [];\r\n\r\n  if (animals.length !== 0) {\r\n    languagesAbb = Object.keys(animals[0].name);\r\n  }\r\n\r\n  const animalSpeciesMenuFilter = (value: string) => {\r\n    const filtredAnimals: AnimalType[] = [...animals].filter((item) => {\r\n      return value === item.specie;\r\n    });\r\n    setAnimalsFilter(filtredAnimals);\r\n  };\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('animals', JSON.stringify(animals));\r\n    setAnimalsFilter(animals);\r\n  }, [animals]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <img className=\"logo\" src=\"/logo.png\" alt=\"logo\" />\r\n      <div className=\"language\">\r\n        <select\r\n          className=\"language__select\"\r\n          value={selectLanguage}\r\n          onChange={(e) => {\r\n            setSelectLanguage(e.target.value);\r\n          }}\r\n        >\r\n          {languagesAbb.length !== 0 ? (\r\n            languagesAbb.map((item) => {\r\n              return (\r\n                <option key={item} value={item}>\r\n                  {item.toUpperCase()}\r\n                </option>\r\n              );\r\n            })\r\n          ) : (\r\n            <option value=\"en\">EN</option>\r\n          )}\r\n        </select>\r\n        <Link className=\"button\" to=\"/translations\">\r\n          Add new language\r\n        </Link>\r\n      </div>\r\n      {filtredSpecies.length !== 0 && (\r\n        <nav className=\"navbar\">\r\n          <button\r\n            onClick={() => setAnimalsFilter(animals)}\r\n            className=\"navbar__button\"\r\n          >\r\n            All\r\n          </button>\r\n          {filtredSpecies.map((specie) => {\r\n            return (\r\n              <button\r\n                key={specie}\r\n                onClick={() => animalSpeciesMenuFilter(specie)}\r\n                className=\"navbar__button\"\r\n              >\r\n                {specie}\r\n              </button>\r\n            );\r\n          })}\r\n        </nav>\r\n      )}\r\n      {animalsFilter.length === 0 ? (\r\n        <h1>No animal found</h1>\r\n      ) : (\r\n        <div className=\"animals\">\r\n          {animalsFilter.map((animal, index) => {\r\n            return (\r\n              <div className=\"animal__card\" key={index}>\r\n                <span\r\n                  className=\"delete-animal__button\"\r\n                  onClick={() => dispatch(deleteAnimal(animal.id))}\r\n                >\r\n                  X\r\n                </span>\r\n                <img\r\n                  className=\"animal__image\"\r\n                  src={animal.imgSrc}\r\n                  alt={animal.name[selectLanguage]}\r\n                />\r\n                <h4>{animal.name[selectLanguage]}</h4>\r\n                <span>{animal.specie}</span>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n      <div className=\"buttons\">\r\n        <button className=\"button\" onClick={() => setToggleForm(true)}>\r\n          Add animal\r\n        </button>\r\n        <button\r\n          className=\"button alert\"\r\n          onClick={() => dispatch(updateAnimals([]))}\r\n        >\r\n          Clear all\r\n        </button>\r\n      </div>\r\n      {toggleForm && <Form clickHandler={setToggleForm} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\r\nimport { updateAnimals } from '../features/animalsSlice';\r\n\r\nconst langCodes = {\r\n  af: 'Afrikaans',\r\n  sq: 'Albanian',\r\n  an: 'Aragonese',\r\n  ar: 'Arabic',\r\n  hy: 'Armenian',\r\n  as: 'Assamese',\r\n  ast: 'Asturian',\r\n  az: 'Azerbaijani',\r\n  eu: 'Basque',\r\n  bg: 'Bulgarian',\r\n  be: 'Belarusian',\r\n  bn: 'Bengali',\r\n  bs: 'Bosnian',\r\n  br: 'Breton',\r\n  my: 'Burmese',\r\n  ca: 'Catalan',\r\n  ch: 'Chamorro',\r\n  ce: 'Chechen',\r\n  zh: 'Chinese',\r\n  cv: 'Chuvash',\r\n  co: 'Corsican',\r\n  cr: 'Cree',\r\n  hr: 'Croatian',\r\n  cs: 'Czech',\r\n  da: 'Danish',\r\n  nl: 'Dutch',\r\n  en: 'English',\r\n  eo: 'Esperanto',\r\n  et: 'Estonian',\r\n  fo: 'Faeroese',\r\n  fa: 'Farsi',\r\n  fj: 'Fijian',\r\n  fi: 'Finnish',\r\n  fr: 'French',\r\n  fy: 'Frisian',\r\n  fur: 'Friulian',\r\n  gd: 'Gaelic',\r\n  gl: 'Galacian',\r\n  ka: 'Georgian',\r\n  de: 'German',\r\n  el: 'Greek',\r\n  gu: 'Gujurati',\r\n  ht: 'Haitian',\r\n  he: 'Hebrew',\r\n  hi: 'Hindi',\r\n  hu: 'Hungarian',\r\n  is: 'Icelandic',\r\n  id: 'Indonesian',\r\n  iu: 'Inuktitut',\r\n  ga: 'Irish',\r\n  it: 'Italian',\r\n  ja: 'Japanese',\r\n  kn: 'Kannada',\r\n  ks: 'Kashmiri',\r\n  kk: 'Kazakh',\r\n  km: 'Khmer',\r\n  ky: 'Kirghiz',\r\n  tlh: 'Klingon',\r\n  ko: 'Korean',\r\n  la: 'Latin',\r\n  lv: 'Latvian',\r\n  lt: 'Lithuanian',\r\n  lb: 'Luxembourgish',\r\n  mk: 'Macedonian',\r\n  ms: 'Malay',\r\n  ml: 'Malayalam',\r\n  mt: 'Maltese',\r\n  mi: 'Maori',\r\n  mr: 'Marathi',\r\n  mo: 'Moldavian',\r\n  nv: 'Navajo',\r\n  ng: 'Ndonga',\r\n  ne: 'Nepali',\r\n  no: 'Norwegian',\r\n  oc: 'Occitan',\r\n  or: 'Oriya',\r\n  om: 'Oromo',\r\n  pl: 'Polish',\r\n  pt: 'Portuguese',\r\n  pa: 'Punjabi',\r\n  qu: 'Quechua',\r\n  rm: 'Rhaeto-Romanic',\r\n  ro: 'Romanian',\r\n  ru: 'Russian',\r\n  sz: 'Sami',\r\n  sg: 'Sango',\r\n  sa: 'Sanskrit',\r\n  sc: 'Sardinian',\r\n  sd: 'Sindhi',\r\n  si: 'Singhalese',\r\n  sr: 'Serbian',\r\n  sk: 'Slovak',\r\n  sl: 'Slovenian',\r\n  so: 'Somani',\r\n  sb: 'Sorbian',\r\n  es: 'Spanish',\r\n  sx: 'Sutu',\r\n  sw: 'Swahili',\r\n  sv: 'Swedish',\r\n  ta: 'Tamil',\r\n  tt: 'Tatar',\r\n  te: 'Teluga',\r\n  th: 'Thai',\r\n  tig: 'Tigre',\r\n  ts: 'Tsonga',\r\n  tn: 'Tswana',\r\n  tr: 'Turkish',\r\n  tk: 'Turkmen',\r\n  uk: 'Ukrainian',\r\n  hsb: 'Upper Sorbian',\r\n  ur: 'Urdu',\r\n  ve: 'Venda',\r\n  vi: 'Vietnamese',\r\n  vo: 'Volapuk',\r\n  wa: 'Walloon',\r\n  cy: 'Welsh',\r\n  xh: 'Xhosa',\r\n  ji: 'Yiddish',\r\n  zu: 'Zulu',\r\n};\r\n\r\nconst Translations = () => {\r\n  const [selectLanguage, setSelectLanguage] = useState('');\r\n  const [inputTranslate, setInputTranslate] = useState<string[]>([]);\r\n  const dispatch = useAppDispatch();\r\n  const langCodesTytles = Object.values(langCodes);\r\n  const animals = useAppSelector((state) => state.animal);\r\n  const animalNames = animals.map((animal) => {\r\n    return animal.name;\r\n  });\r\n\r\n  const getKeyByValue = Object.keys(langCodes).find(\r\n    //@ts-ignore\r\n    (key: number) => langCodes[key] === selectLanguage\r\n  );\r\n\r\n  const newAnimalArr = animals.map((item, index) => {\r\n    const name = Object.assign({}, item.name);\r\n\r\n    if (getKeyByValue) {\r\n      name[getKeyByValue] = inputTranslate[index];\r\n    }\r\n    const imgSrc = item.imgSrc;\r\n    const specie = item.specie;\r\n    const id = item.id;\r\n    return { name, imgSrc, specie, id };\r\n  });\r\n\r\n  const updateFieldChanged = (input: string, index: number) => {\r\n    let newArr = [...inputTranslate];\r\n    newArr[index] = input;\r\n    setInputTranslate(newArr);\r\n  };\r\n\r\n  const submit = (e: React.ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setSelectLanguage('');\r\n    //@ts-ignore\r\n    delete langCodes[getKeyByValue];\r\n    dispatch(updateAnimals(newAnimalArr));\r\n  };\r\n\r\n  return (\r\n    <div className=\"translations\">\r\n      <img className=\"logo\" src=\"/logo.png\" alt=\"logo\" />\r\n      <h1>Translations</h1>\r\n      <form className=\"translations__form\" onSubmit={submit}>\r\n        <select\r\n          value={selectLanguage}\r\n          onChange={(e) => {\r\n            setSelectLanguage(e.target.value);\r\n          }}\r\n        >\r\n          <option value=\"- Choose language -\">- Choose language -</option>\r\n          {langCodesTytles.map((item) => {\r\n            return (\r\n              <option key={item} value={item}>\r\n                {item}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n        {!selectLanguage ||\r\n          (selectLanguage !== '- Choose language -' && (\r\n            <>\r\n              <table className=\"translations__table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"table__heading\">Animal</th>\r\n                    <th className=\"table__heading\">Language</th>\r\n                    <th className=\"table__heading\">Translation</th>\r\n                  </tr>\r\n                </thead>\r\n                {animalNames.map((name, index) => {\r\n                  return (\r\n                    <tbody key={name.en}>\r\n                      <tr>\r\n                        <th rowSpan={2} className=\"table__row subheading\">\r\n                          {name.en}\r\n                        </th>\r\n                      </tr>\r\n                      <tr>\r\n                        <th className=\"table__row\">{selectLanguage}</th>\r\n                        <th className=\"table__row\">\r\n                          Enter translation\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"translate__input\"\r\n                            value={inputTranslate[index]}\r\n                            onChange={(e) =>\r\n                              updateFieldChanged(e.target.value, index)\r\n                            }\r\n                          />\r\n                        </th>\r\n                      </tr>\r\n                    </tbody>\r\n                  );\r\n                })}\r\n              </table>\r\n              <button className=\"button\">Add language</button>\r\n            </>\r\n          ))}\r\n      </form>\r\n      <Link className=\"button\" to=\"/\">\r\n        Back to Main page\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Translations;\r\n","import { useEffect, useState } from 'react';\r\nimport Form from './components/form';\r\nimport { useAppDispatch, useAppSelector } from './app/hooks';\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport NotFound from './pages/NotFound';\r\nimport Main from './pages/Main';\r\nimport Translations from './pages/Translations';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Main />} />\r\n      <Route path=\"/translations\" element={<Translations />} />\r\n      <Route path=\"/404\" element={<NotFound />} />\r\n      <Route path=\"*\" element={<NotFound />} />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport animalsReducer from '../features/animalsSlice'\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    animal: animalsReducer,\r\n  }\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}